version: 2.1
commands:

orbs:
  kubernetes: circleci/kubernetes@0.12.0
jobs:

  build-application:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [app-build]
      - run:
          name: Build node app
          command: |

            cd addressbook
            npm i
            #npm run build
      - save_cache:
          paths: [addressbook/node_modules]
          key: app-build

  lint-code:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - restore_cache:
          keys: [app-build]
      - run:
          name: Scan addressbook
          command: |
            cd addressbook
            npm run lint

  test-db:
    docker:
      #- image: docker:17.05.0-ce-git
      - image: circleci/node:13.8.0
      - image: circleci/postgres:9.6.10
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [app-build]
      #- setup_remote_docker
           
      # - run:
      #     name: Run DB Docker
      #     command: |
      #       cd addressbook
      #       docker run -it -d -e "POSTGRES_HOST_AUTH_METHOD=trust" -p 5432:5432 postgres
      #- run: sleep 5 && nc -vz localhost 5432
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run: 
          name: Run DB test
          command: |
            cd addressbook
            dockerize -wait tcp://localhost:5432 -timeout 1m
            npm i
            npm run test

  integration-test:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
      - image: circleci/postgres:9.6.10
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
    steps:
      - checkout
      - restore_cache:
          keys: [app-build]
      #- setup_remote_docker
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Run integration test
          command: |
            cd addressbook
            dockerize -wait tcp://localhost:5432 -timeout 1m
            npm i
            npm run migrate
            npm run pm2 &
            dockerize -wait tcp://localhost:3000 -timeout 1m
            curl -w "\n" \
            -X PUT \
            -d "firstName=Bobbie&lastName=Draper" \
            localhost:3000/persons
            URL=localhost:3000/persons/all
            if curl -s "${URL}" | grep "Bobbie"
            then
              echo "FE worked";
            else
              echo "FE failed";
              exit 1;
            fi
  build-and-push-container:
    docker:
      #- image: docker:17.05.0-ce-git
      - image: circleci/node:13.8.0
      # Docker image here
    working_directory: /home/circleci/project/
    steps:
      - checkout
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - restore_cache:
          keys: [app-build]

      - setup_remote_docker
          # version: 19.03.13
          # docker_layer_caching: true

      - run:
          name: build docker image
          command: |
            cd addressbook
            TAG=0.1.$CIRCLE_BUILD_NUM
            docker build -t $DOCKER_USER/addressbook:$TAG .
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            
      #docker push  $DOCKER_USER/addressbook:$TAG 
      

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar
            yum install -y gzip
      - restore_cache:
          keys: [kubeconfig]
        
      - run:
          name: Ensure VPC infrastructure exists
          command: |
            
            aws cloudformation deploy \
              --template-file awsEnv/network.yml \
              --tags project=EksDevops \
              --stack-name "EksDevops-network-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides  file://awsEnv/network-parameter.json --capabilities CAPABILITY_NAMED_IAM
            echo "${CIRCLE_WORKFLOW_ID}"
              
      - run:
          name: Ensure EKS Cluster exist
          command: |
            
            aws cloudformation deploy \
              --template-file awsEnv/EksCluster.yml \
              --tags project=EksDevops \
              --stack-name "EksDevops-cluster-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides file://awsEnv/server-parameter.json  --capabilities CAPABILITY_NAMED_IAM

            aws eks update-kubeconfig --name "EksDevops"
            cp ~/.kube/config addressbook/kubeconfig
      - save_cache:
          paths: [addressbook/kubeconfig]
          key: kubeconfig

  deploy-rolling-update:
    docker:
      - image: amazon/aws-cli
      # Docker image here
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar
            yum install -y gzip
            yum install -y gettext
            aws eks update-kubeconfig --name "EksDevops"
            envsubst < eksDeploy/app-deployments.yml | tee eksDeploy/app-deployments.yml
      - restore_cache:
          keys: [kubeconfig]

      - kubernetes/install-kubectl
      - kubernetes/create-or-update-resource:
          get-rollout-status: false
          resource-file-path: eksDeploy/postgres-secrets.yml
          #resource-name: postgres-deployment
          show-kubectl-command: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: eksDeploy/db-deployments.yml
          resource-name: Deployment/postgre-deployment
          show-kubectl-command: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: eksDeploy/app-deployments.yml
          resource-name: Deployment/addressbook-deployment
          show-kubectl-command: true
      - run:
          name: Install dependencies
          command: |
            echo `kubectl get service/addressbook -o jsonpath='{.status.loadBalancer.ingress[*].hostname}'`

  smoke-test:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Run smoke test
          command: |
            HOST-NAME=`kubectl get service/addressbook -o jsonpath='{.status.loadBalancer.ingress[*].hostname}'`
            dockerize -wait tcp://$HOST-NAME:3000 -timeout 1m
            curl -w "\n" \
            -X PUT \
            -d "firstName=Bobbie&lastName=Draper" \
            $HOST-NAME:3000/persons
            URL=$HOST-NAME:3000/persons/all
            if curl -s "${URL}" | grep "Bobbie"
            then
              echo "smoke test worked";
            else
              echo "smoke test failed";
              exit 1;
            fi                  

workflows:
  default:
    jobs:
      - build-application
      - lint-code:
          requires: [build-application]
      - test-db:
          requires: [lint-code]
      - integration-test:
          requires: [test-db]
      - build-and-push-container:
          requires: [integration-test]
      #- deploy-infrastructure:
          #requires: [build-and-push-container]
      - deploy-rolling-update:
           #requires: [deploy-infrastructure]
           requires: [build-and-push-container]
      